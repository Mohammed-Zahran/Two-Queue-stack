import java.util.LinkedList;
import java.util.Queue;

public class StackUsingTwoQueues {
    private Queue<Integer> queue1;
    private Queue<Integer> queue2;
    private int top;

    // Constructor to initialize the stack
    public StackUsingTwoQueues() {
        queue1 = new LinkedList<>();
        queue2 = new LinkedList<>();
    }

    // Method to push an element onto the stack
    public void push(int x) {
        queue1.add(x);
        top = x;
    }

    // Method to pop an element from the stack
    public int pop() {
        if (queue1.isEmpty()) {
            System.out.println("Stack is empty. Cannot pop.");
            return -1;
        }

        // Leave one element in queue1 and push others in queue2.
        while (queue1.size() > 1) {
            top = queue1.remove();
            queue2.add(top);
        }

        // Pop the only left element from queue1
        int popped = queue1.remove();

        // Swap the names of queue1 and queue2
        Queue<Integer> temp = queue1;
        queue1 = queue2;
        queue2 = temp;

        return popped;
    }

    // Method to get the top element of the stack
    public int top() {
        if (queue1.isEmpty()) {
            System.out.println("Stack is empty. Nothing at the top.");
            return -1;
        }
        return top;
    }

    // Method to check if the stack is empty
    public boolean isEmpty() {
        return queue1.isEmpty();
    }

    // Main method to test the stack using two queues
    public static void main(String[] args) {
        StackUsingTwoQueues stack = new StackUsingTwoQueues();

        stack.push(10);
        stack.push(20);
        stack.push(30);
        stack.push(40);
        stack.push(50);

        System.out.println("Top element is: " + stack.top());
        System.out.println("Popped element is: " + stack.pop());
        System.out.println("Top element is: " + stack.top());

        stack.push(60);
        System.out.println("Top element is: " + stack.top());
        
        while (!stack.isEmpty()) {
            System.out.println("Popped element is: " + stack.pop());
        }
        
        System.out.println("Stack is empty: " + stack.isEmpty());
    }
}
